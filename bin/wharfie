#!/usr/bin/env node
'use strict';

const fs = require('fs');
const path = require('path');
const os = require('os');
const { Command } = require('commander');
const program = new Command();

const HOME = os.homedir();
const CONFIG_DIR = process.env.XDG_CONFIG_HOME || path.join(HOME, '.config');
process.env.CONFIG_PATH = `${CONFIG_DIR}/wharfie.config`;
process.env.LOGGING_FORMAT = 'cli';
process.env.LOGGING_LEVEL = 'warn';

const { displayFailure } = require('../cli/output/basic');
const config = require('../cli/config');

if (fs.existsSync(process.env.CONFIG_PATH)) {
  try {
    config.setConfig(
      JSON.parse(fs.readFileSync(process.env.CONFIG_PATH, 'utf8'))
    );
    config.setEnvironment();
  } catch (err) {
    const lastArgs = process.argv.slice(-2);
    if (!(lastArgs.includes('config') && lastArgs.includes('wharfie'))) {
      displayFailure(
        'Failed to load config. Run "wharfie config" to resolve.'
      );
      // eslint-disable-next-line no-process-exit
      process.exit(1);
    }
  }
}

program
  .name('wharfie')
  .description('CLI tool for Wharfie')
  .version(require('../package.json').version);

program.addCommand(require('../cli/cmds/config'));
program.addCommand(require('../cli/cmds/list'));
program.addCommand(require('../cli/cmds/utils'));
program.addCommand(require('../cli/cmds/project'));
program.addCommand(require('../cli/cmds/deployment'));

program.hook('preAction', async () => {
  try {
    await config.validate();
  } catch (err) {
    displayFailure(err)
    // eslint-disable-next-line no-process-exit
    process.exit(1);
  }
});

// Show help if no command is provided
if (!process.argv.slice(2).length) {
  program.outputHelp();
  // eslint-disable-next-line no-process-exit
  process.exit(1);
}

if (!process.stdin.isTTY) {
  process.env.stdin = '';
  process.stdin.on('readable', function () {
    const chunk = this.read();
    if (chunk !== null) {
      process.env.stdin += chunk;
    }
  });
  process.stdin.on('end', () => {
    program.parse(process.argv);
  });
} else {
  program.parse(process.argv);
}